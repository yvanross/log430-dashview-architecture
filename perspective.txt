.addPERSPECTIVE("C01", "Usability\nLes configurations pour les catégories des alarmes et des capteurs doivent être définies dans un fichier XML.");
.addPERSPECTIVE("C02", "Usability\nLes configurations pour le mode par défaut et les couleurs de l’interface sont définies directement dans iOS.");
.addPERSPECTIVE("C03", "can2Ethernet\nLa librairie Can2Ethernet développée par le club Formule ÉTS doit être utilisée.");
.addPERSPECTIVE("C04", "Objective-C\nL’application doit être en Objective-C sous la plateforme iOS 7 et est destinée aux iPod Touch de 5e génération avec un écran de 4 pouces");
.addPERSPECTIVE("C05", "Wifi UDP\nLes données sont envoyées par Wi-Fi via le protocole UDP et le bus CAN.");
.addPERSPECTIVE("C06","UDP port\nLe port UDP est le port par défaut soit 1337.");
.addPERSPECTIVE("C07", "Id et offset des capteurs\nLes « id » et les « offset » des capteurs doivent suivre la table CAN fournie.");
.addPERSPECTIVE("C08","langue\nLes textes de l’application doivent être en anglais.");
.addPERSPECTIVE("C09","deployment\nL’application doit être installée et exécutée sur un iPod Touch qui ne nécessite pas un « iOS jailbreaking » ");
.addPERSPECTIVE("EF01","Configuration de l’application avec un fichier XML\nL’application doit utiliser un fichier de configuration, sous le format XML, pour déterminer les alarmes et capteurs disponibles. La liste des alarmes et des capteurs sont définis selon la table CAN fournie par la Formule ÉTS.");
.addPERSPECTIVE("EF02","Configuration de l’application dans les paramètres d’iOS\nLe système doit permettre de changer quelques configurations directement dans les paramètres de l’application sur iOS. Les configurations doivent inclure, entre autres, le changement de mode entre pilote et ingénieur de piste ainsi que le changement des couleurs de l’interface de pâle à foncé.");
.addPERSPECTIVE("EF03","Gérer les données reçues en temps réel\nL’application doit constamment recevoir des données du bus CAN via Wi-Fi à partir du module Can2Ethernet et, en comparant avec la table des messages CAN, associer ces données aux capteurs et alarmes pour les afficher.");
.addPERSPECTIVE("EF04","Afficher des couleurs spécifiques pour les RPM\nL’application doit afficher l’indicateur de RPM avec un code de couleur précis, soit de jaune à rouge en passant par une zone orange visible. De 3000 RPM à 15 000 RPM, l’indicateur doit être dans le spectre de jaune à rouge. À 15 000 RPM et plus, l’indicateur doit être rouge. De plus, le rouge doit changer selon un paramètre calculé par l’ACL lorsqu’un message correspondant au « id » de la table CAN de ce paramètre est reçu.");
.addPERSPECTIVE("EF05","Afficher des couleurs spécifiques pour la température des pneus\nL’application doit afficher la température des trois capteurs de chaque pneu selon des couleurs spécifiques et avec des transitions fluides. Les capteurs sont situés à l’extérieur, au milieu et à l’intérieur de chacun des pneus. Lorsque la température est de 25°C et moins, la couleur est bleue. Entre 25°C et 65°C, la couleur passe de bleue à jaune. Entre 65°C et 95°C, l’indicateur passe de jaune à rouge. Finalement, en haut de 95°C, la couleur est rouge.");
.addPERSPECTIVE("EF06","Afficher des couleurs spécifiques pour la température du moteur\nLe Dash Display doit afficher la température du moteur à l’aide de quatre couleurs. Lorsque la température est de 70°C et moins, l’indicateur doit être bleu. Entre 70°C et 90°C, la couleur utilisée est le vert. Entre 90°C et 100°C, l’indicateur doit être jaune et, finalement, il doit être rouge lorsque la température dépasse le 100°C.");
.addPERSPECTIVE("EF07","Afficher des couleurs spécifiques pour la puissance de la batterie\nLe système doit afficher la puissance de la batterie à l’aide de deux couleurs. Lorsque la batterie est à la puissance maximale (14V) jusqu’à 11.5V, le fond du capteur est vert. Lorsque la puissance atteint 11.5 V et en dessous, le fond devient rouge.");
.addPERSPECTIVE("EF08","Afficher des couleurs spécifiques pour les alertes\nLe Dash Display doit afficher les alertes de deux façons selon leur statut. Dans tous les cas, elles sont affichées en rouge. Lorsqu’elles sont en cours, elles ont une opacité de 100 %. Sinon, l’opacité diminue à 30 %.");
.addPERSPECTIVE("EF09","Visualiser les alarmes et les capteurs sur l’interface pilote\nL’application doit afficher, de manière claire, les informations nécessaires au pilote en provenance des différents capteurs du véhicule. De plus, les messages d’alarmes seront aussi affichés de façon évidente et de façon à ce que le pilote les remarques immédiatement.");
.addPERSPECTIVE("EF10","Changer l’interface lors de l’appui sur le bouton du volant\nL’application doit changer l’interface affichée lorsque le pilote appuie sur un bouton du volant. Le bouton envoie un message CAN à l’application pour lui indiquer de changer. L’application en mode pilote affichera quatre interfaces différentes en boucle.");
.addPERSPECTIVE("EF11","Contenu de la première interface\nL’application doit afficher, sur la première interface, les capteurs suivants : la température du moteur, le voltage de la batterie, l’indicateur d’utilisation et d’angle du système de réduction de traînée, les différentes alarmes, la boîte de messages, l’indicateur de vitesse et l’indicateur de révolutions par minute.");
.addPERSPECTIVE("EF12","Contenu de la deuxième interface\nLe Dash Display doit afficher, sur la deuxième interface, les capteurs suivants : la pression et la température des pneus, le biais de frein, l’antiroulis, l’odomètre, le voltage de la batterie, la température du moteur et un indicateur d’utilisation et l’angle du système de réduction de traînée.");
.addPERSPECTIVE("EF13","Contenu de la troisième interface\nL’application doit afficher, sur la troisième interface, le temps total de course, le temps du tour courant, la différence de temps par rapport au meilleur temps, le meilleur temps de tour de piste et la différence de temps par rapport au dernier de tour de piste.");
.addPERSPECTIVE("EF14","Contenu de la quatrième interface\nDash Display doit afficher, sur la quatrième interface, un schéma de la piste de course et le déplacement de la voiture en temps réel. De plus, les temps suivants doivent être présents : le temps du tour de piste, le meilleur temps et la différence par rapport au meilleur temps.");
.addPERSPECTIVE("EF15","Affichage en mode paysage pour le mode pilote\ndoit afficher les interfaces en mode pilote sous le format paysage.");
.addPERSPECTIVE("EF16","Mettre en veille l’application après 3 secondes sans données\ndoit se mettre en veille si une interruption de données survient et si elle dure plus de trois secondes.");
.addPERSPECTIVE("EF17","Visualiser les alarmes et les capteurs sur l’interface ingénieur\ndoit afficher, sous forme de liste, les différents capteurs et alarmes que l’utilisateur décide d’inclure. Les capteurs et les alarmes sont affichés séparément, les alarmes se trouvant en haut de la liste. Lors de la présentation du prototype, le club formule ÉTS a précisé qu’ils souhaiteraient traiter les alarmes de la même façon que les différents capteurs donc les rendre modifiable sur la page principale.");
.addPERSPECTIVE("EF18","Ajouter une alarme ou un capteur\ndoit permettre à l’utilisateur de sélectionner dans une liste une alarme ou un capteur à ajouter à la liste d’affichage. L’application doit aussi permettre de filtrer la liste des alarmes et des capteurs qui peuvent être ajoutés et d’y effectuer une recherche.");
.addPERSPECTIVE("EF19","Changer l’ordre des alarmes et des capteurs affichés\ndoit permettre à l’utilisateur, une fois en mode édition de la liste, de réorganiser respectivement les alarmes et les capteurs entre eux.");
.addPERSPECTIVE("EF20","Supprimer une alarme ou un capteur affiché\ndoit permettre à l’utilisateur, une fois en mode édition de la liste, de supprimer un capteur ou une alarme.");
.addPERSPECTIVE("EF21","Afficher les détails de l’alarme ou du capteur\nsystème doit permettre de cliquer sur un capteur ou une alarme affichés afin d’obtenir plus de détails. Lors de la présentation du prototype, cette exigence a été clarifiée. Le client désire avoir la possibilité de modifier l’affichage du widget pour d’autres formats ainsi qu’obtenir un historique des dernières données. Les informations apparaissent sous le widget principal avec la possibilité d’afficher l’historique en plein écran.");
.addPERSPECTIVE("EF22","Gérer les cas d’erreurs de l’application\ndoit, en cas d’erreurs de l’application, afficher les dernières données reçues. Les cas d’erreurs peuvent être, par exemple, une erreur de transmission de données ou un message d’erreur reçu par une chaîne CAN du module Can2Ethernet.");
.addPERSPECTIVE("ENF01","Utilisation du visuel de façon intuitive\nL’interface doit respecter le fonctionnement natif d’iOS lorsque les diverses actions sont effectuées dans le mode ingénieur de piste. Par exemple, l’ingénieur de piste doit entrer en mode édition pour supprimer ou déplacer une alarme ou un capteur.");
.addPERSPECTIVE("ENF02","Utilisation du mode pilote doit être très simple\nLes différentes interfaces du mode pilote doivent être simples, claires et précises. Lorsque la voiture est en piste, le pilote ne doit pas avoir à réfléchir pour comprendre et utiliser l’application. Les quatre interfaces disponibles doivent être toutes visibles en trois clics du bouton situé sur le volant puis continuer de cette façon en boucle.");
.addPERSPECTIVE("ENF03","Démarrage simple et rapide dans le mode configuré\nLorsque le Dash Display démarre, il ne doit pas y avoir d’attente ou de commande à effectuer pour que l’application puisse être utilisée. Cette exigence est surtout importante pour le mode pilote qui ne peut pas utiliser l’écran tactile. De plus, le système doit utiliser le mode choisi dans les configurations de l’application directement dans iOS.");
.addPERSPECTIVE("ENF04","Haut contraste dans les couleurs de l’interface\nLes couleurs de l’interface doivent avoir de très haut contraste. De plus, deux versions de couleurs doivent être disponibles dans la configuration de l’application sur iOS : un mode foncé et un mode pâle.");
.addPERSPECTIVE("ENF05","Rafraîchissement de l’écran à une cadence de 10 Hz\nLa fréquence de rafraîchissement des interfaces est de 10 Hz afin que les données affichées soient toujours à jour en temps réel. Avec cette cadence, le véhicule a le temps de transmettre les nouvelles données par Wi-Fi. Cette mesure signifie 10 fois par seconde donc le rafraîchissement est d’une fois à chaque 100 ms.");
.addPERSPECTIVE("ENF06","Période d’utilisation d’au maximum 25 minutes\nLes courses ont une durée d’au maximum 25 minutes donc l’application doit être optimisée pour une utilisation sans problème pour ce délai de temps.");
.addPERSPECTIVE("ENF07","Modification rapide des alarmes et des capteurs\nLa liste des alarmes et des capteurs peut facilement être modifiée en 5 minutes et moins. Cette modification est effectuée sur le fichier de configuration XML en fournissant le « id » et l’« offset » définis dans la table CAN. Cette exigence n’était pas précisée de la part du client, mais une précision concernant la table CAN qui peut être modifiée a été faite. Il est donc important que tout le logiciel soit facilement maintenable.");
.addPERSPECTIVE("ENF08","Aucun redémarrage de l’application en cas d’erreur\nLorsqu’une erreur survient, l’application ne doit pas redémarrer seule. Il faut la redémarrer manuellement à chaque fois.");
